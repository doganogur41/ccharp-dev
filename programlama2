#include <iostream>
#include <vector>
#include <iomanip>
#include <string>
#include <ctime>
#include <map>

using namespace std;

int generateOrderId() {
    static int id = 1000;
    return id++;
}

struct Coffee {
    string name;
    string description;
    double basePrice;
};

struct Order {
    int orderId;
    Coffee coffee;
    string size;
    double price;
    time_t timestamp;
    string username;
    bool isCancelled;
};

class CoffeeShop {
private:
    vector<Coffee> menu;
    vector<Order> orders;
    map<string, string> users;
    string currentUser;
    bool isLoggedIn;

public:
    CoffeeShop() : isLoggedIn(false) {
        menu.push_back(Coffee{"Espresso", "Yogun ve sert bir kahve", 15.0});
        menu.push_back(Coffee{"Latte", "Sutlu ve yumusak icimli", 18.0});
        menu.push_back(Coffee{"Cappuccino", "Kopuklu espresso ve sut", 17.0});
        menu.push_back(Coffee{"Americano", "Sicak su ile seyreltmis espresso", 16.0});
        menu.push_back(Coffee{"Mocha", "Cikolata aromali kahve", 20.0});

        users["admin"] = "1234";
        users["ahmet"] = "pass1";
        users["ayse"] = "coffee";
    }

    void authMenu() {
        int choice;
        do {
            cout << "\n==== GIRIS / KAYIT ====\n";
            cout << "1. Giris Yap\n";
            cout << "2. Kayit Ol\n";
            cout << "0. Cikis\n";
            cout << "Seciminiz: ";
            cin >> choice;

            switch (choice) {
                case 1: login(); break;
                case 2: registerUser(); break;
                case 0:
                    cout << "Cikis yapiliyor...\n";
                    exit(0);
                default:
                    cout << "Gecersiz secim!\n";
            }
        } while (!isLoggedIn);
    }

    void login() {
        string username, password;
        int attempts = 3;

        while (attempts > 0) {
            cout << "\nGiris\n";
            cout << "Kullanici Adi: "; cin >> username;
            cout << "Sifre: "; cin >> password;

            if (users.count(username) && users[username] == password) {
                isLoggedIn = true;
                currentUser = username;
                cout << "Giris basarili! Hos geldin, " << currentUser << "!\n";
                return;
            } else {
                attempts--;
                cout << "Hatali bilgiler. Kalan deneme: " << attempts << "\n";
            }
        }
        cout << "Giris basarisiz. Ana menuye donuluyor...\n";
    }

    void registerUser() {
        string username, password;
        cout << "\nKayit Ol\n";
        cout << "Yeni Kullanici Adi: "; cin >> username;

        if (users.count(username)) {
            cout << "Bu kullanici adi zaten alinmis.\n";
            return;
        }

        cout << "Sifre Belirleyin: "; cin >> password;
        users[username] = password;
        cout << "Kayit basarili! Simdi giris yapabilirsiniz.\n";
    }

    void displayMenu() {
        cout << "\n--- KAHVE MENUSU ---\n";
        for (size_t i = 0; i < menu.size(); ++i) {
            cout << i + 1 << ". " << menu[i].name
                 << " - " << menu[i].basePrice << " TL\n";
            cout << "   Aciklama: " << menu[i].description << "\n";
        }
    }

    double getSizeMultiplier(int sizeOption) {
        if (sizeOption == 1) return 1.0;
        if (sizeOption == 2) return 1.2;
        if (sizeOption == 3) return 1.5;
        return 1.0;
    }

    void takeOrder() {
        if (!isLoggedIn) {
            cout << "Siparis vermek icin giris yapmalisiniz.\n";
            return;
        }

        displayMenu();
        cout << "\nKahve numarasini secin: ";
        int choice;
        cin >> choice;
        if (choice < 1 || choice > (int)menu.size()) {
            cout << "Gecersiz secim!\n";
            return;
        }

        cout << "\nBoyut Secin (1-Kucuk, 2-Orta, 3-Buyuk): ";
        int sizeChoice;
        cin >> sizeChoice;
        string sizeLabel;
        if (sizeChoice == 1) sizeLabel = "Kucuk";
        else if (sizeChoice == 2) sizeLabel = "Orta";
        else if (sizeChoice == 3) sizeLabel = "Buyuk";
        else {
            cout << "Gecersiz secim!\n";
            return;
        }

        double price = menu[choice - 1].basePrice * getSizeMultiplier(sizeChoice);
        int id = generateOrderId();
        time_t now = time(0);
        Order newOrder;
        newOrder.orderId = id;
        newOrder.coffee = menu[choice - 1];
        newOrder.size = sizeLabel;
        newOrder.price = price;
        newOrder.timestamp = now;
        newOrder.username = currentUser;
        newOrder.isCancelled = false;
        orders.push_back(newOrder);

        cout << "Siparis alindi: " << menu[choice - 1].name
             << " (" << sizeLabel << ") - " << fixed << setprecision(2)
             << price << " TL (No: " << id << ")\n";
    }

    void showActiveOrders() {
        cout << "\n--- AKTIF SIPARISLER ---\n";
        double total = 0.0;
        for (size_t i = 0; i < orders.size(); ++i) {
            Order &o = orders[i];
            if (o.username != currentUser || o.isCancelled) continue;
            char *dt = ctime(&o.timestamp);
            cout << "No: " << o.orderId << " Urun: " << o.coffee.name
                 << " (" << o.size << ") Fiyat: " << fixed << setprecision(2)
                 << o.price << " TL Zaman: " << dt;
            total += o.price;
        }
        cout << "Toplam: " << fixed << setprecision(2) << total << " TL\n";
    }

    void showHistoryOrders() {
        cout << "\n--- GECMIS SIPARISLER ---\n";
        for (size_t i = 0; i < orders.size(); ++i) {
            Order &o = orders[i];
            if (o.username != currentUser) continue;
            char *dt = ctime(&o.timestamp);
            cout << "No: " << o.orderId << " Urun: " << o.coffee.name
                 << " (" << o.size << ") Fiyat: " << fixed << setprecision(2)
                 << o.price << " TL Zaman: " << dt;
            if (o.isCancelled) cout << " [IPTAL EDILDI]";
            cout << "-----------------------------\n";
        }
    }

    void cancelOrder() {
        cout << "\nIptal edilecek siparis numarasi: ";
        int id;
        cin >> id;
        for (size_t i = 0; i < orders.size(); ++i) {
            Order &o = orders[i];
            if (o.orderId == id && o.username == currentUser && !o.isCancelled) {
                o.isCancelled = true;
                cout << "Siparis no " << id << " iptal edildi.\n";
                return;
            }
        }
        cout << "Siparis bulunamadi veya zaten iptal edilmis.\n";
    }

    void run() {
        authMenu();
        int opt;
        do {
            cout << "\n===== KAHVE SIPARIS UYGULAMASI =====\n";
            cout << "1. Menuyu goruntule\n";
            cout << "2. Siparis ver\n";
            cout << "3. Aktif siparisleri goruntule\n";
            cout << "4. Siparis iptal et\n";
            cout << "5. Gecmis siparisler\n";
            cout << "0. Cikis\n";
            cout << "Seciminiz: ";
            cin >> opt;
            switch (opt) {
                case 1: displayMenu(); break;
                case 2: takeOrder(); break;
                case 3: showActiveOrders(); break;
                case 4: cancelOrder(); break;
                case 5: showHistoryOrders(); break;
                case 0: cout << "Cikis yapiliyor.\n"; break;
                default: cout << "Gecersiz secim!\n";
            }
        } while (opt != 0);
    }
};

int main() {
    CoffeeShop app;
    app.run();
    return 0;
}
