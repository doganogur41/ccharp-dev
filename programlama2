#include <iostream>
#include <vector>
#include <iomanip>
#include <string>
#include <ctime>
#include <map>

using namespace std;

int generateOrderId() {
    static int id = 1000;
    return id++;
}

struct Coffee {
    string name;
    string description;
    double basePrice;
};

struct Order {
    int orderId;
    Coffee coffee;
    string size;
    double price;
    time_t timestamp;
    string username;  // Kullanƒ±cƒ± adƒ± eklendi
};

class CoffeeShop {
private:
    vector<Coffee> menu;
    vector<Order> orders;
    map<string, string> users;
    string currentUser;
    bool isLoggedIn;

public:
    CoffeeShop() : isLoggedIn(false) {
        menu.push_back({"Espresso", "Yoƒüun ve sert bir kahve", 15.0});
        menu.push_back({"Latte", "S√ºtl√º ve yumu≈üak i√ßimli", 18.0});
        menu.push_back({"Cappuccino", "K√∂p√ºkl√º espresso ve s√ºt", 17.0});
        menu.push_back({"Americano", "Sƒ±cak su ile seyreltilmi≈ü espresso", 16.0});
        menu.push_back({"Mocha", "√áikolata aromalƒ± kahve", 20.0});

        users["admin"] = "1234";
        users["ahmet"] = "pass1";
        users["ayse"] = "coffee";
    }

    void authMenu() {
        int choice;
        do {
            cout << "\n==== ‚òï Gƒ∞Rƒ∞≈û / KAYIT ====\n";
            cout << "1. Giri≈ü Yap\n";
            cout << "2. Kayƒ±t Ol\n";
            cout << "0. √áƒ±kƒ±≈ü\n";
            cout << "Se√ßiminiz: ";
            cin >> choice;

            switch (choice) {
                case 1: login(); break;
                case 2: registerUser(); break;
                case 0:
                    cout << "üëã Uygulama kapatƒ±lƒ±yor...\n";
                    exit(0);
                default:
                    cout << "‚ùå Ge√ßersiz se√ßim!\n";
            }
        } while (!isLoggedIn);
    }

    void login() {
        string username, password;
        int attempts = 3;

        while (attempts-- > 0) {
            cout << "\nüîê Giri≈ü\n";
            cout << "Kullanƒ±cƒ± Adƒ±: ";
            cin >> username;
            cout << "≈ûifre: ";
            cin >> password;

            if (users.count(username) && users[username] == password) {
                isLoggedIn = true;
                currentUser = username;
                cout << "‚úÖ Giri≈ü ba≈üarƒ±lƒ±! Ho≈ü geldin, " << currentUser << "!\n";
                return;
            } else {
                cout << "‚ùå Hatalƒ± kullanƒ±cƒ± adƒ± veya ≈üifre. Kalan deneme: " << attempts << endl;
            }
        }

        cout << "üö´ Giri≈ü ba≈üarƒ±sƒ±z. Ana men√ºye d√∂n√ºl√ºyor...\n";
    }

    void registerUser() {
        string username, password;

        cout << "\nüìù Kayƒ±t Ol\n";
        cout << "Yeni Kullanƒ±cƒ± Adƒ±: ";
        cin >> username;

        if (users.count(username)) {
            cout << "‚ö†Ô∏è Bu kullanƒ±cƒ± adƒ± zaten alƒ±nmƒ±≈ü.\n";
            return;
        }

        cout << "≈ûifre Belirleyin: ";
        cin >> password;

        users[username] = password;

        cout << "‚úÖ Kayƒ±t ba≈üarƒ±lƒ±! ≈ûimdi giri≈ü yapabilirsiniz.\n";
    }

    void displayMenu() {
        cout << "\nüìã --- KAHVE MEN√úS√ú ---\n";
        for (size_t i = 0; i < menu.size(); ++i) {
            cout << i + 1 << ". " << menu[i].name 
                 << " - " << menu[i].basePrice << " TL"
                 << "\n   A√ßƒ±klama: " << menu[i].description << endl;
        }
    }

    double getSizeMultiplier(int sizeOption) {
        switch (sizeOption) {
            case 1: return 1.0;
            case 2: return 1.2;
            case 3: return 1.5;
            default: return 1.0;
        }
    }

    void takeOrder() {
        if (!isLoggedIn) {
            cout << "‚ö†Ô∏è Sipari≈ü vermek i√ßin giri≈ü yapmalƒ±sƒ±nƒ±z.\n";
            return;
        }

        int choice, sizeChoice;
        string sizeLabel;

        displayMenu();

        cout << "\n‚òï L√ºtfen kahve numarasƒ±nƒ± se√ßin: ";
        cin >> choice;

        if (choice < 1 || choice > menu.size()) {
            cout << "‚ùå Ge√ßersiz se√ßim!\n";
            return;
        }

        cout << "\nBoyut Se√ßin:\n";
        cout << "1. K√º√ß√ºk\n";
        cout << "2. Orta\n";
        cout << "3. B√ºy√ºk\n";
        cout << "Se√ßiminiz (1-3): ";
        cin >> sizeChoice;

        switch (sizeChoice) {
            case 1: sizeLabel = "K√º√ß√ºk"; break;
            case 2: sizeLabel = "Orta"; break;
            case 3: sizeLabel = "B√ºy√ºk"; break;
            default:
                cout << "‚ùå Ge√ßersiz se√ßim!\n";
                return;
        }

        double multiplier = getSizeMultiplier(sizeChoice);
        double finalPrice = menu[choice - 1].basePrice * multiplier;
        int orderId = generateOrderId();
        time_t now = time(0);

        orders.push_back({orderId, menu[choice - 1], sizeLabel, finalPrice, now, currentUser});

        cout << "‚úÖ Sipari≈ü Alƒ±ndƒ±: " << menu[choice - 1].name << " (" << sizeLabel 
             << ") - " << fixed << setprecision(2) << finalPrice 
             << " TL (Sipari≈ü No: " << orderId << ")\n";
    }

    void showOrders() {
        if (orders.empty()) {
            cout << "üö´ Hen√ºz sipari≈ü yok.\n";
            return;
        }

        cout << "\nüì¶ --- Sƒ∞PARƒ∞≈ûLER ---\n";
        double total = 0;

        for (const auto& order : orders) {
            if (order.username == currentUser) {
                char* dt = ctime(&order.timestamp);
                cout << "üîπ Sipari≈ü No: " << order.orderId << endl;
                cout << "    √úr√ºn: " << order.coffee.name << " (" << order.size << ")\n";
                cout << "    Fiyat: " << order.price << " TL\n";
                cout << "    Zaman: " << dt;
                cout << "-----------------------------\n";
                total += order.price;
            }
        }

        cout << "üí∞ Toplam: " << fixed << setprecision(2) << total << " TL\n";
    }

    void cancelOrder() {
        if (orders.empty()) {
            cout << "‚ùå ƒ∞ptal edilecek sipari≈ü yok.\n";
            return;
        }

        int id;
        cout << "ƒ∞ptal etmek istediƒüiniz sipari≈ü numarasƒ±nƒ± girin: ";
        cin >> id;

        for (auto it = orders.begin(); it != orders.end(); ++it) {
            if (it->orderId == id && it->username == currentUser) {
                cout << "‚úÖ " << it->coffee.name << " sipari≈üi iptal edildi.\n";
                orders.erase(it);
                return;
            }
        }

        cout << "‚ùå Sipari≈ü bulunamadƒ±.\n";
    }

    void run() {
        authMenu();

        int option;
        do {
            cout << "\n===== ‚òï Kahve Sipari≈ü Uygulamasƒ± =====\n";
            cout << "1. Men√ºy√º G√∂r√ºnt√ºle\n";
            cout << "2. Sipari≈ü Ver\n";
            cout << "3. Sipari≈üleri G√∂r√ºnt√ºle\n";
            cout << "4. Sipari≈ü ƒ∞ptali\n";
            cout << "5. Ge√ßmi≈ü Sipari≈üler\n";  // Yeni se√ßenek eklendi
            cout << "0. √áƒ±kƒ±≈ü\n";
            cout << "Se√ßiminiz: ";
            cin >> option;

            switch (option) {
                case 1: displayMenu(); break;
                case 2: takeOrder(); break;
                case 3: showOrders(); break;
                case 4: cancelOrder(); break;
                case 5: showOrders(); break;  // Ge√ßmi≈ü sipari≈üler se√ßeneƒüi burada √ßaƒürƒ±ldƒ±
                case 0:
                    cout << "üëã G√∂r√º≈ümek √ºzere, " << currentUser << ". Uygulama kapatƒ±lƒ±yor.\n";
                    break;
                default:
                    cout << "‚ùó Ge√ßersiz se√ßim!\n";
            }
        } while (option != 0);
    }
};

int main() {
    CoffeeShop app;
    app.run();
    return 0;
}
