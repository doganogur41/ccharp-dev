#include <iostream>
#include <vector>
#include <iomanip>
#include <string>
#include <ctime>
#include <map>

using namespace std;

int generateOrderId() {
    static int id = 1000;
    return id++;
}

struct Coffee {
    string name;
    string description;
    double basePrice;
};

struct Order {
    int orderId;
    Coffee coffee;
    string size;
    double price;
    time_t timestamp;
    string username;  // Kullanici adi eklendi
};

class CoffeeShop {
private:
    vector<Coffee> menu;
    vector<Order> orders;
    map<string, string> users;
    string currentUser;
    bool isLoggedIn;

public:
    CoffeeShop() : isLoggedIn(false) {
        menu.push_back({"Espresso", "Yogun ve sert bir kahve", 15.0});
        menu.push_back({"Latte", "Sutlu ve yumusak icimli", 18.0});
        menu.push_back({"Cappuccino", "Kopuklu espresso ve sut", 17.0});
        menu.push_back({"Americano", "Sicak su ile seyreltmis espresso", 16.0});
        menu.push_back({"Mocha", "Cikolata aromali kahve", 20.0});

        users["admin"] = "1234";
        users["ahmet"] = "pass1";
        users["ayse"] = "coffee";
    }

    void authMenu() {
        int choice;
        do {
            cout << "\n==== ? GIRIS / KAYIT ====\n";
            cout << "1. Giris Yap\n";
            cout << "2. Kayit Ol\n";
            cout << "0. Cikis\n";
            cout << "Seciminiz: ";
            cin >> choice;

            switch (choice) {
                case 1: login(); break;
                case 2: registerUser(); break;
                case 0:
                    cout << "?? Uygulama kapatiliyor...\n";
                    exit(0);
                default:
                    cout << "? Gecersiz secim!\n";
            }
        } while (!isLoggedIn);
    }

    void login() {
        string username, password;
        int attempts = 3;

        while (attempts-- > 0) {
            cout << "\n?? Giris\n";
            cout << "Kullanici Adi: ";
            cin >> username;
            cout << "Sifre: ";
            cin >> password;

            if (users.count(username) && users[username] == password) {
                isLoggedIn = true;
                currentUser = username;
                cout << "? Giris basarili! Hos geldin, " << currentUser << "!\n";
                return;
            } else {
                cout << "? Hatali kullanici adi veya sifre. Kalan deneme: " << attempts << "\n";
            }
        }

        cout << "?? Giris basarisiz. Ana menuye donuluyor...\n";
    }

    void registerUser() {
        string username, password;

        cout << "\n?? Kayit Ol\n";
        cout << "Yeni Kullanici Adi: ";
        cin >> username;

        if (users.count(username)) {
            cout << "?? Bu kullanici adi zaten alinmis.\n";
            return;
        }

        cout << "Sifre Belirleyin: ";
        cin >> password;

        users[username] = password;
        cout << "? Kayit basarili! Simdi giris yapabilirsiniz.\n";
    }

    void displayMenu() {
        cout << "\n?? --- KAHVE MENUSU ---\n";
        for (size_t i = 0; i < menu.size(); ++i) {
            cout << i + 1 << ". " << menu[i].name 
                 << " - " << menu[i].basePrice << " TL\n";
            cout << "   Aciklama: " << menu[i].description << "\n";
        }
    }

    double getSizeMultiplier(int sizeOption) {
        switch (sizeOption) {
            case 1: return 1.0;
            case 2: return 1.2;
            case 3: return 1.5;
            default: return 1.0;
        }
    }

    void takeOrder() {
        if (!isLoggedIn) {
            cout << "?? Siparis vermek icin giris yapmalisiniz.\n";
            return;
        }

        int choice, sizeChoice;
        string sizeLabel;
        displayMenu();

        cout << "\n? Lutfen kahve numarasini secin: ";
        cin >> choice;
        if (choice < 1 || choice > menu.size()) {
            cout << "? Gecersiz secim!\n";
            return;
        }

        cout << "\nBoyut Secin:" << "\n";
        cout << "1. Kucuk\n";
        cout << "2. Orta\n";
        cout << "3. Buyuk\n";
        cout << "Seciminiz (1-3): ";
        cin >> sizeChoice;

        switch (sizeChoice) {
            case 1: sizeLabel = "Kucuk"; break;
            case 2: sizeLabel = "Orta"; break;
            case 3: sizeLabel = "Buyuk"; break;
            default:
                cout << "? Gecersiz secim!\n";
                return;
        }

        double multiplier = getSizeMultiplier(sizeChoice);
        double finalPrice = menu[choice - 1].basePrice * multiplier;
        int orderId = generateOrderId();
        time_t now = time(0);
        orders.push_back({orderId, menu[choice - 1], sizeLabel, finalPrice, now, currentUser});

        cout << "? Siparis Alindi: " << menu[choice - 1].name 
             << " (" << sizeLabel << ") - " 
             << fixed << setprecision(2) << finalPrice 
             << " TL (Siparis No: " << orderId << ")\n";
    }

    void showOrders() {
        if (orders.empty()) {
            cout << "?? Henuz siparis yok.\n";
            return;
        }

        cout << "\n?? --- SIPARISLER ---\n";
        double total = 0.0;

        for (size_t i = 0; i < orders.size(); ++i) {
            const Order& order = orders[i];
            if (order.username != currentUser) continue;

            char* dt = ctime(&order.timestamp);
            cout << "?? Siparis No: " << order.orderId << "\n";
            cout << "    Urun: " << order.coffee.name 
                 << " (" << order.size << ")\n";
            cout << "    Fiyat: " << fixed << setprecision(2) 
                 << order.price << " TL\n";
            cout << "    Zaman: " << dt;
            cout << "-----------------------------\n";

            total += order.price;
        }

        cout << "?? Toplam: " << fixed << setprecision(2) 
             << total << " TL\n";
    }

    void cancelOrder() {
        if (orders.empty()) {
            cout << "? Iptal edilecek siparis yok.\n";
            return;
        }

        int id;
        cout << "Iptal etmek istediginiz siparis numarasini girin: ";
        cin >> id;

        for (size_t i = 0; i < orders.size(); ++i) {
            if (orders[i].orderId == id && orders[i].username == currentUser) {
                cout << "? " << orders[i].coffee.name 
                     << " siparisi iptal edildi.\n";
                orders.erase(orders.begin() + i);
                return;
            }
        }

        cout << "? Siparis bulunamadi.\n";
    }

    void run() {
        authMenu();

        int option;
        do {
            cout << "\n===== ? Kahve Siparis Uygulamasi =====\n";
            cout << "1. Menuyu Goruntule\n";
            cout << "2. Siparis Ver\n";
            cout << "3. Siparisleri Goruntule\n";
            cout << "4. Siparis Iptali\n";
            cout << "5. Gecmis Siparisler\n";
            cout << "0. Cikis\n";
            cout << "Seciminiz: ";
            cin >> option;

            switch (option) {
                case 1: displayMenu(); break;
                case 2: takeOrder(); break;
                case 3: showOrders(); break;
                case 4: cancelOrder(); break;
                case 5: showOrders(); break;
                case 0:
                    cout << "?? Gorusmek uzere, " << currentUser 
                         << ". Uygulama kapatiliyor.\n";
                    break;
                default:
                    cout << "? Gecersiz secim!\n";
            }
        } while (option != 0);
    }
};

int main() {
    CoffeeShop app;
    app.run();
    return 0;
}
